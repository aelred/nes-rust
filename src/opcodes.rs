use crate::addressing_modes::BITAddressingMode;
use crate::addressing_modes::CompareAddressingMode;
use crate::addressing_modes::FlexibleAddressingMode;
use crate::addressing_modes::IncDecAddressingMode;
use crate::addressing_modes::JumpAddressingMode;
use crate::addressing_modes::LDXAddressingMode;
use crate::addressing_modes::LDYAddressingMode;
use crate::addressing_modes::STXAddressingMode;
use crate::addressing_modes::STYAddressingMode;
use crate::addressing_modes::ShiftAddressingMode;
use crate::addressing_modes::StoreAddressingMode;
use crate::instructions::Instruction;
use enum_primitive_derive::Primitive;

#[derive(Primitive, Copy, Clone)]
pub enum OpCode {
    BRK = 0x00,
    ORAIndexedIndirect = 0x01,
    //  FutureExpansion = 0x02,
    //  FutureExpansion = 0x03,
    //  FutureExpansion = 0x04,
    ORAZeroPage = 0x05,
    ASLZeroPage = 0x06,
    //  FutureExpansion = 0x07,
    PHP = 0x08,
    ORAImmediate = 0x09,
    ASLAccumulator = 0x0A,
    //  FutureExpansion = 0x0B,
    //  FutureExpansion = 0x0C,
    ORAAbsolute = 0x0D,
    ASLAbsolute = 0x0E,
    //  FutureExpansion = 0x0F,
    BPL = 0x10,
    ORAIndirectIndexed = 0x11,
    //  FutureExpansion = 0x12,
    //  FutureExpansion = 0x13,
    //  FutureExpansion = 0x14,
    ORAZeroPageX = 0x15,
    ASLZeroPageX = 0x16,
    //  FutureExpansion = 0x17,
    CLC = 0x18,
    ORAAbsoluteY = 0x19,
    //  FutureExpansion = 0x1A,
    //  FutureExpansion = 0x1B,
    //  FutureExpansion = 0x1C,
    ORAAbsoluteX = 0x1D,
    ASLAbsoluteX = 0x1E,
    //  FutureExpansion = 0x1F,
    JSR = 0x20,
    ANDIndexedIndirect = 0x21,
    //  FutureExpansion = 0x22,
    //  FutureExpansion = 0x23,
    BITZeroPage = 0x24,
    ANDZeroPage = 0x25,
    ROLZeroPage = 0x26,
    //  FutureExpansion = 0x27,
    PLP = 0x28,
    ANDImmediate = 0x29,
    ROLAccumulator = 0x2A,
    //  FutureExpansion = 0x2B,
    BITAbsolute = 0x2C,
    ANDAbsolute = 0x2D,
    ROLAbsolute = 0x2E,
    //  FutureExpansion = 0x2F,
    BMI = 0x30,
    ANDIndirectIndexed = 0x31,
    //  FutureExpansion = 0x32,
    //  FutureExpansion = 0x33,
    //  FutureExpansion = 0x34,
    ANDZeroPageX = 0x35,
    ROLZeroPageX = 0x36,
    //  FutureExpansion = 0x37,
    SEC = 0x38,
    ANDAbsoluteY = 0x39,
    //  FutureExpansion = 0x3A,
    //  FutureExpansion = 0x3B,
    //  FutureExpansion = 0x3C,
    ANDAbsoluteX = 0x3D,
    ROLAbsoluteX = 0x3E,
    //  FutureExpansion = 0x3F,
    RTI = 0x40,
    EORIndexedIndirect = 0x41,
    //  FutureExpansion = 0x42,
    //  FutureExpansion = 0x43,
    //  FutureExpansion = 0x44,
    EORZeroPage = 0x45,
    LSRZeroPage = 0x46,
    //  FutureExpansion = 0x47,
    PHA = 0x48,
    EORImmediate = 0x49,
    LSRAccumulator = 0x4A,
    //  FutureExpansion = 0x4B,
    JMPAbsolute = 0x4C,
    EORAbsolute = 0x4D,
    LSRAbsolute = 0x4E,
    //  FutureExpansion = 0x4F,
    BVC = 0x50,
    EORIndirectIndexed = 0x51,
    //  FutureExpansion = 0x52,
    //  FutureExpansion = 0x53,
    //  FutureExpansion = 0x54,
    EORZeroPageX = 0x55,
    LSRZeroPageX = 0x56,
    //  FutureExpansion = 0x57,
    CLI = 0x58,
    EORAbsoluteY = 0x59,
    //  FutureExpansion = 0x5A,
    //  FutureExpansion = 0x5B,
    //  FutureExpansion = 0x5C,
    EORAbsoluteX = 0x5D,
    LSRAbsoluteX = 0x5E,
    //  FutureExpansion = 0x5F,
    RTS = 0x60,
    ADCIndexedIndirect = 0x61,
    //  FutureExpansion = 0x62,
    //  FutureExpansion = 0x63,
    //  FutureExpansion = 0x64,
    ADCZeroPage = 0x65,
    RORZeroPage = 0x66,
    //  FutureExpansion = 0x67,
    PLA = 0x68,
    ADCImmediate = 0x69,
    RORAccumulator = 0x6A,
    //  FutureExpansion = 0x68,
    JMPIndirect = 0x6C,
    ADCAbsolute = 0x6D,
    RORAbsolute = 0x6E,
    //  FutureExpansion = 0x6F,
    BVS = 0x70,
    ADCIndirectIndexed = 0x71,
    //  FutureExpansion = 0x72,
    //  FutureExpansion = 0x73,
    //  FutureExpansion = 0x74,
    ADCZeroPageX = 0x75,
    RORZeroPageX = 0x76,
    //  FutureExpansion = 0x77,
    SEI = 0x78,
    ADCAbsoluteY = 0x79,
    //  FutureExpansion = 0x7A,
    //  FutureExpansion = 0x78,
    //  FutureExpansion = 0x7C,
    ADCAbsoluteX = 0x7D,
    RORAbsoluteX = 0x7E,
    //  FutureExpansion = 0x7F,
    //  FutureExpansion = 0x80,
    STAIndexedIndirect = 0x81,
    //  FutureExpansion = 0x82,
    //  FutureExpansion = 0x83,
    STYZeroPage = 0x84,
    STAZeroPage = 0x85,
    STXZeroPage = 0x86,
    //  FutureExpansion = 0x87,
    DEY = 0x88,
    //  FutureExpansion = 0x89,
    TXA = 0x8A,
    //  FutureExpansion = 0x8B,
    STYAbsolute = 0x8C,
    STAAbsolute = 0x8D,
    STXAbsolute = 0x8E,
    //  FutureExpansion = 0x8F,
    BCC = 0x90,
    STAIndirectIndexed = 0x91,
    //  FutureExpansion = 0x92,
    //  FutureExpansion = 0x93,
    STYZeroPageX = 0x94,
    STAZeroPageX = 0x95,
    STXZeroPageY = 0x96,
    //  FutureExpansion = 0x97,
    TYA = 0x98,
    STAAbsoluteY = 0x99,
    TXS = 0x9A,
    //  FutureExpansion = 0x98,
    //  FutureExpansion = 0x9C,
    STAAbsoluteX = 0x9D,
    //  FutureExpansion = 0x9E,
    //  FutureExpansion = 0x9F,
    LDYImmediate = 0xA0,
    LDAIndexedIndirect = 0xA1,
    LDXImmediate = 0xA2,
    //  FutureExpansion = 0xA3,
    LDYZeroPage = 0xA4,
    LDAZeroPage = 0xA5,
    LDXZeroPage = 0xA6,
    //  FutureExpansion = 0xA7,
    TAY = 0xA8,
    LDAImmediate = 0xA9,
    TAX = 0xAA,
    //  FutureExpansion = 0xAB,
    LDYAbsolute = 0xAC,
    LDAAbsolute = 0xAD,
    LDXAbsolute = 0xAE,
    //  FutureExpansion = 0xAF,
    BCS = 0xB0,
    LDAIndirectIndexed = 0xB1,
    //  FutureExpansion = 0xB2,
    //  FutureExpansion = 0xB3,
    LDYZeroPageX = 0xB4,
    LDAZeroPageX = 0xB5,
    LDXZeroPageY = 0xB6,
    //  FutureExpansion = 0xB7,
    CLV = 0xB8,
    LDAAbsoluteY = 0xB9,
    TSX = 0xBA,
    //  FutureExpansion = 0xBB,
    LDYAbsoluteX = 0xBC,
    LDAAbsoluteX = 0xBD,
    LDXAbsoluteY = 0xBE,
    //  FutureExpansion = 0xBF,
    CPYImmediate = 0xC0,
    CMPIndexedIndirect = 0xC1,
    //  FutureExpansion = 0xC2,
    //  FutureExpansion = 0xC3,
    CPYZeroPage = 0xC4,
    CMPZeroPage = 0xC5,
    DECZeroPage = 0xC6,
    //  FutureExpansion = 0xC7,
    INY = 0xC8,
    CMPImmediate = 0xC9,
    DEX = 0xCA,
    //  FutureExpansion = 0xCB,
    CPYAbsolute = 0xCC,
    CMPAbsolute = 0xCD,
    DECAbsolute = 0xCE,
    //  FutureExpansion = 0xCF,
    BNE = 0xD0,
    CMPIndirectIndexed = 0xD1,
    //  FutureExpansion = 0xD2,
    //  FutureExpansion = 0xD3,
    //  FutureExpansion = 0xD4,
    CMPZeroPageX = 0xD5,
    DECZeroPageX = 0xD6,
    //  FutureExpansion = 0xD7,
    CLD = 0xD8,
    CMPAbsoluteY = 0xD9,
    //  FutureExpansion = 0xDA,
    //  FutureExpansion = 0xDB,
    //  FutureExpansion = 0xDC,
    CMPAbsoluteX = 0xDD,
    DECAbsoluteX = 0xDE,
    //  FutureExpansion = 0xDF,
    CPXImmediate = 0xE0,
    SBCIndexedIndirect = 0xE1,
    //  FutureExpansion = 0xE2,
    //  FutureExpansion = 0xE3,
    CPXZeroPage = 0xE4,
    SBCZeroPage = 0xE5,
    INCZeroPage = 0xE6,
    //  FutureExpansion = 0xE7,
    INX = 0xE8,
    SBCImmediate = 0xE9,
    NOP = 0xEA,
    //  FutureExpansion = 0xEB,
    CPXAbsolute = 0xEC,
    SBCAbsolute = 0xED,
    INCAbsolute = 0xEE,
    //  FutureExpansion = 0xEF,
    BEQ = 0xF0,
    SBCIndirectIndexed = 0xF1,
    //  FutureExpansion = 0xF2,
    //  FutureExpansion = 0xF3,
    //  FutureExpansion = 0xF4,
    SBCZeroPageX = 0xF5,
    INCZeroPageX = 0xF6,
    //  FutureExpansion = 0xF7,
    SED = 0xF8,
    SBCAbsoluteY = 0xF9,
    //  FutureExpansion = 0xFA,
    //  FutureExpansion = 0xFB,
    //  FutureExpansion = 0xFC,
    SBCAbsoluteX = 0xFD,
    INCAbsoluteX = 0xFE,
    //  FutureExpansion = 0xFF,
}

impl OpCode {
    pub fn new(instr: Instruction) -> Self {
        use crate::instructions::Instruction::*;

        match instr {
            BRK => OpCode::BRK,
            ORA(FlexibleAddressingMode::IndexedIndirect) => OpCode::ORAIndexedIndirect,
            ORA(FlexibleAddressingMode::ZeroPage) => OpCode::ORAZeroPage,
            ASL(ShiftAddressingMode::ZeroPage) => OpCode::ASLZeroPage,
            PHP => OpCode::PHP,
            ORA(FlexibleAddressingMode::Immediate) => OpCode::ORAImmediate,
            ASL(ShiftAddressingMode::Accumulator) => OpCode::ASLAccumulator,
            ORA(FlexibleAddressingMode::Absolute) => OpCode::ORAAbsolute,
            ASL(ShiftAddressingMode::Absolute) => OpCode::ASLAbsolute,
            BPL => OpCode::BPL,
            ORA(FlexibleAddressingMode::IndirectIndexed) => OpCode::ORAIndirectIndexed,
            ORA(FlexibleAddressingMode::ZeroPageX) => OpCode::ORAZeroPageX,
            ASL(ShiftAddressingMode::ZeroPageX) => OpCode::ASLZeroPageX,
            CLC => OpCode::CLC,
            ORA(FlexibleAddressingMode::AbsoluteY) => OpCode::ORAAbsoluteY,
            ORA(FlexibleAddressingMode::AbsoluteX) => OpCode::ORAAbsoluteX,
            ASL(ShiftAddressingMode::AbsoluteX) => OpCode::ASLAbsoluteX,
            JSR => OpCode::JSR,
            AND(FlexibleAddressingMode::IndexedIndirect) => OpCode::ANDIndexedIndirect,
            BIT(BITAddressingMode::ZeroPage) => OpCode::BITZeroPage,
            AND(FlexibleAddressingMode::ZeroPage) => OpCode::ANDZeroPage,
            ROL(ShiftAddressingMode::ZeroPage) => OpCode::ROLZeroPage,
            PLP => OpCode::PLP,
            AND(FlexibleAddressingMode::Immediate) => OpCode::ANDImmediate,
            ROL(ShiftAddressingMode::Accumulator) => OpCode::ROLAccumulator,
            BIT(BITAddressingMode::Absolute) => OpCode::BITAbsolute,
            AND(FlexibleAddressingMode::Absolute) => OpCode::ANDAbsolute,
            ROL(ShiftAddressingMode::Absolute) => OpCode::ROLAbsolute,
            BMI => OpCode::BMI,
            AND(FlexibleAddressingMode::IndirectIndexed) => OpCode::ANDIndirectIndexed,
            AND(FlexibleAddressingMode::ZeroPageX) => OpCode::ANDZeroPageX,
            ROL(ShiftAddressingMode::ZeroPageX) => OpCode::ROLZeroPageX,
            SEC => OpCode::SEC,
            AND(FlexibleAddressingMode::AbsoluteY) => OpCode::ANDAbsoluteY,
            AND(FlexibleAddressingMode::AbsoluteX) => OpCode::ANDAbsoluteX,
            ROL(ShiftAddressingMode::AbsoluteX) => OpCode::ROLAbsoluteX,
            RTI => OpCode::RTI,
            EOR(FlexibleAddressingMode::IndexedIndirect) => OpCode::EORIndexedIndirect,
            EOR(FlexibleAddressingMode::ZeroPage) => OpCode::EORZeroPage,
            LSR(ShiftAddressingMode::ZeroPage) => OpCode::LSRZeroPage,
            PHA => OpCode::PHA,
            EOR(FlexibleAddressingMode::Immediate) => OpCode::EORImmediate,
            LSR(ShiftAddressingMode::Accumulator) => OpCode::LSRAccumulator,
            JMP(JumpAddressingMode::Absolute) => OpCode::JMPAbsolute,
            EOR(FlexibleAddressingMode::Absolute) => OpCode::EORAbsolute,
            LSR(ShiftAddressingMode::Absolute) => OpCode::LSRAbsolute,
            BVC => OpCode::BVC,
            EOR(FlexibleAddressingMode::IndirectIndexed) => OpCode::EORIndirectIndexed,
            EOR(FlexibleAddressingMode::ZeroPageX) => OpCode::EORZeroPageX,
            LSR(ShiftAddressingMode::ZeroPageX) => OpCode::LSRZeroPageX,
            CLI => OpCode::CLI,
            EOR(FlexibleAddressingMode::AbsoluteY) => OpCode::EORAbsoluteY,
            EOR(FlexibleAddressingMode::AbsoluteX) => OpCode::EORAbsoluteX,
            LSR(ShiftAddressingMode::AbsoluteX) => OpCode::LSRAbsoluteX,
            RTS => OpCode::RTS,
            ADC(FlexibleAddressingMode::IndexedIndirect) => OpCode::ADCIndexedIndirect,
            ADC(FlexibleAddressingMode::ZeroPage) => OpCode::ADCZeroPage,
            ROR(ShiftAddressingMode::ZeroPage) => OpCode::RORZeroPage,
            PLA => OpCode::PLA,
            ADC(FlexibleAddressingMode::Immediate) => OpCode::ADCImmediate,
            ROR(ShiftAddressingMode::Accumulator) => OpCode::RORAccumulator,
            JMP(JumpAddressingMode::Indirect) => OpCode::JMPIndirect,
            ADC(FlexibleAddressingMode::Absolute) => OpCode::ADCAbsolute,
            ROR(ShiftAddressingMode::Absolute) => OpCode::RORAbsolute,
            BVS => OpCode::BVS,
            ADC(FlexibleAddressingMode::IndirectIndexed) => OpCode::ADCIndirectIndexed,
            ADC(FlexibleAddressingMode::ZeroPageX) => OpCode::ADCZeroPageX,
            ROR(ShiftAddressingMode::ZeroPageX) => OpCode::RORZeroPageX,
            SEI => OpCode::SEI,
            ADC(FlexibleAddressingMode::AbsoluteY) => OpCode::ADCAbsoluteY,
            ADC(FlexibleAddressingMode::AbsoluteX) => OpCode::ADCAbsoluteX,
            ROR(ShiftAddressingMode::AbsoluteX) => OpCode::RORAbsoluteX,
            STA(StoreAddressingMode::IndexedIndirect) => OpCode::STAIndexedIndirect,
            STY(STYAddressingMode::ZeroPage) => OpCode::STYZeroPage,
            STA(StoreAddressingMode::ZeroPage) => OpCode::STAZeroPage,
            STX(STXAddressingMode::ZeroPage) => OpCode::STXZeroPage,
            DEY => OpCode::DEY,
            TXA => OpCode::TXA,
            STY(STYAddressingMode::Absolute) => OpCode::STYAbsolute,
            STA(StoreAddressingMode::Absolute) => OpCode::STAAbsolute,
            STX(STXAddressingMode::Absolute) => OpCode::STXAbsolute,
            BCC => OpCode::BCC,
            STA(StoreAddressingMode::IndirectIndexed) => OpCode::STAIndirectIndexed,
            STY(STYAddressingMode::ZeroPageX) => OpCode::STYZeroPageX,
            STA(StoreAddressingMode::ZeroPageX) => OpCode::STAZeroPageX,
            STX(STXAddressingMode::ZeroPageY) => OpCode::STXZeroPageY,
            TYA => OpCode::TYA,
            STA(StoreAddressingMode::AbsoluteY) => OpCode::STAAbsoluteY,
            TXS => OpCode::TXS,
            STA(StoreAddressingMode::AbsoluteX) => OpCode::STAAbsoluteX,
            LDY(LDYAddressingMode::Immediate) => OpCode::LDYImmediate,
            LDA(FlexibleAddressingMode::IndexedIndirect) => OpCode::LDAIndexedIndirect,
            LDX(LDXAddressingMode::Immediate) => OpCode::LDXImmediate,
            LDY(LDYAddressingMode::ZeroPage) => OpCode::LDYZeroPage,
            LDA(FlexibleAddressingMode::ZeroPage) => OpCode::LDAZeroPage,
            LDX(LDXAddressingMode::ZeroPage) => OpCode::LDXZeroPage,
            TAY => OpCode::TAY,
            LDA(FlexibleAddressingMode::Immediate) => OpCode::LDAImmediate,
            TAX => OpCode::TAX,
            LDY(LDYAddressingMode::Absolute) => OpCode::LDYAbsolute,
            LDA(FlexibleAddressingMode::Absolute) => OpCode::LDAAbsolute,
            LDX(LDXAddressingMode::Absolute) => OpCode::LDXAbsolute,
            BCS => OpCode::BCS,
            LDA(FlexibleAddressingMode::IndirectIndexed) => OpCode::LDAIndirectIndexed,
            LDY(LDYAddressingMode::ZeroPageX) => OpCode::LDYZeroPageX,
            LDA(FlexibleAddressingMode::ZeroPageX) => OpCode::LDAZeroPageX,
            LDX(LDXAddressingMode::ZeroPageY) => OpCode::LDXZeroPageY,
            CLV => OpCode::CLV,
            LDA(FlexibleAddressingMode::AbsoluteY) => OpCode::LDAAbsoluteY,
            TSX => OpCode::TSX,
            LDY(LDYAddressingMode::AbsoluteX) => OpCode::LDYAbsoluteX,
            LDA(FlexibleAddressingMode::AbsoluteX) => OpCode::LDAAbsoluteX,
            LDX(LDXAddressingMode::AbsoluteY) => OpCode::LDXAbsoluteY,
            CPY(CompareAddressingMode::Immediate) => OpCode::CPYImmediate,
            CMP(FlexibleAddressingMode::IndexedIndirect) => OpCode::CMPIndexedIndirect,
            CPY(CompareAddressingMode::ZeroPage) => OpCode::CPYZeroPage,
            CMP(FlexibleAddressingMode::ZeroPage) => OpCode::CMPZeroPage,
            DEC(IncDecAddressingMode::ZeroPage) => OpCode::DECZeroPage,
            INY => OpCode::INY,
            CMP(FlexibleAddressingMode::Immediate) => OpCode::CMPImmediate,
            DEX => OpCode::DEX,
            CPY(CompareAddressingMode::Absolute) => OpCode::CPYAbsolute,
            CMP(FlexibleAddressingMode::Absolute) => OpCode::CMPAbsolute,
            DEC(IncDecAddressingMode::Absolute) => OpCode::DECAbsolute,
            BNE => OpCode::BNE,
            CMP(FlexibleAddressingMode::IndirectIndexed) => OpCode::CMPIndirectIndexed,
            CMP(FlexibleAddressingMode::ZeroPageX) => OpCode::CMPZeroPageX,
            DEC(IncDecAddressingMode::ZeroPageX) => OpCode::DECZeroPageX,
            CLD => OpCode::CLD,
            CMP(FlexibleAddressingMode::AbsoluteY) => OpCode::CMPAbsoluteY,
            CMP(FlexibleAddressingMode::AbsoluteX) => OpCode::CMPAbsoluteX,
            DEC(IncDecAddressingMode::AbsoluteX) => OpCode::DECAbsoluteX,
            CPX(CompareAddressingMode::Immediate) => OpCode::CPXImmediate,
            SBC(FlexibleAddressingMode::IndexedIndirect) => OpCode::SBCIndexedIndirect,
            CPX(CompareAddressingMode::ZeroPage) => OpCode::CPXZeroPage,
            SBC(FlexibleAddressingMode::ZeroPage) => OpCode::SBCZeroPage,
            INC(IncDecAddressingMode::ZeroPage) => OpCode::INCZeroPage,
            INX => OpCode::INX,
            SBC(FlexibleAddressingMode::Immediate) => OpCode::SBCImmediate,
            NOP => OpCode::NOP,
            CPX(CompareAddressingMode::Absolute) => OpCode::CPXAbsolute,
            SBC(FlexibleAddressingMode::Absolute) => OpCode::SBCAbsolute,
            INC(IncDecAddressingMode::Absolute) => OpCode::INCAbsolute,
            BEQ => OpCode::BEQ,
            SBC(FlexibleAddressingMode::IndirectIndexed) => OpCode::SBCIndirectIndexed,
            SBC(FlexibleAddressingMode::ZeroPageX) => OpCode::SBCZeroPageX,
            INC(IncDecAddressingMode::ZeroPageX) => OpCode::INCZeroPageX,
            SED => OpCode::SED,
            SBC(FlexibleAddressingMode::AbsoluteY) => OpCode::SBCAbsoluteY,
            SBC(FlexibleAddressingMode::AbsoluteX) => OpCode::SBCAbsoluteX,
            INC(IncDecAddressingMode::AbsoluteX) => OpCode::INCAbsoluteX,
        }
    }

    pub fn instruction(self) -> Instruction {
        use crate::instructions::Instruction::*;

        match self {
            OpCode::BRK => BRK,
            OpCode::ORAIndexedIndirect => ORA(FlexibleAddressingMode::IndexedIndirect),
            OpCode::ORAZeroPage => ORA(FlexibleAddressingMode::ZeroPage),
            OpCode::ASLZeroPage => ASL(ShiftAddressingMode::ZeroPage),
            OpCode::PHP => PHP,
            OpCode::ORAImmediate => ORA(FlexibleAddressingMode::Immediate),
            OpCode::ASLAccumulator => ASL(ShiftAddressingMode::Accumulator),
            OpCode::ORAAbsolute => ORA(FlexibleAddressingMode::Absolute),
            OpCode::ASLAbsolute => ASL(ShiftAddressingMode::Absolute),
            OpCode::BPL => BPL,
            OpCode::ORAIndirectIndexed => ORA(FlexibleAddressingMode::IndirectIndexed),
            OpCode::ORAZeroPageX => ORA(FlexibleAddressingMode::ZeroPageX),
            OpCode::ASLZeroPageX => ASL(ShiftAddressingMode::ZeroPageX),
            OpCode::CLC => CLC,
            OpCode::ORAAbsoluteY => ORA(FlexibleAddressingMode::AbsoluteY),
            OpCode::ORAAbsoluteX => ORA(FlexibleAddressingMode::AbsoluteX),
            OpCode::ASLAbsoluteX => ASL(ShiftAddressingMode::AbsoluteX),
            OpCode::JSR => JSR,
            OpCode::ANDIndexedIndirect => AND(FlexibleAddressingMode::IndexedIndirect),
            OpCode::BITZeroPage => BIT(BITAddressingMode::ZeroPage),
            OpCode::ANDZeroPage => AND(FlexibleAddressingMode::ZeroPage),
            OpCode::ROLZeroPage => ROL(ShiftAddressingMode::ZeroPage),
            OpCode::PLP => PLP,
            OpCode::ANDImmediate => AND(FlexibleAddressingMode::Immediate),
            OpCode::ROLAccumulator => ROL(ShiftAddressingMode::Accumulator),
            OpCode::BITAbsolute => BIT(BITAddressingMode::Absolute),
            OpCode::ANDAbsolute => AND(FlexibleAddressingMode::Absolute),
            OpCode::ROLAbsolute => ROL(ShiftAddressingMode::Absolute),
            OpCode::BMI => BMI,
            OpCode::ANDIndirectIndexed => AND(FlexibleAddressingMode::IndirectIndexed),
            OpCode::ANDZeroPageX => AND(FlexibleAddressingMode::ZeroPageX),
            OpCode::ROLZeroPageX => ROL(ShiftAddressingMode::ZeroPageX),
            OpCode::SEC => SEC,
            OpCode::ANDAbsoluteY => AND(FlexibleAddressingMode::AbsoluteY),
            OpCode::ANDAbsoluteX => AND(FlexibleAddressingMode::AbsoluteX),
            OpCode::ROLAbsoluteX => ROL(ShiftAddressingMode::AbsoluteX),
            OpCode::RTI => RTI,
            OpCode::EORIndexedIndirect => EOR(FlexibleAddressingMode::IndexedIndirect),
            OpCode::EORZeroPage => EOR(FlexibleAddressingMode::ZeroPage),
            OpCode::LSRZeroPage => LSR(ShiftAddressingMode::ZeroPage),
            OpCode::PHA => PHA,
            OpCode::EORImmediate => EOR(FlexibleAddressingMode::Immediate),
            OpCode::LSRAccumulator => LSR(ShiftAddressingMode::Accumulator),
            OpCode::JMPAbsolute => JMP(JumpAddressingMode::Absolute),
            OpCode::EORAbsolute => EOR(FlexibleAddressingMode::Absolute),
            OpCode::LSRAbsolute => LSR(ShiftAddressingMode::Absolute),
            OpCode::BVC => BVC,
            OpCode::EORIndirectIndexed => EOR(FlexibleAddressingMode::IndirectIndexed),
            OpCode::EORZeroPageX => EOR(FlexibleAddressingMode::ZeroPageX),
            OpCode::LSRZeroPageX => LSR(ShiftAddressingMode::ZeroPageX),
            OpCode::CLI => CLI,
            OpCode::EORAbsoluteY => EOR(FlexibleAddressingMode::AbsoluteY),
            OpCode::EORAbsoluteX => EOR(FlexibleAddressingMode::AbsoluteX),
            OpCode::LSRAbsoluteX => LSR(ShiftAddressingMode::AbsoluteX),
            OpCode::RTS => RTS,
            OpCode::ADCIndexedIndirect => ADC(FlexibleAddressingMode::IndexedIndirect),
            OpCode::ADCZeroPage => ADC(FlexibleAddressingMode::ZeroPage),
            OpCode::RORZeroPage => ROR(ShiftAddressingMode::ZeroPage),
            OpCode::PLA => PLA,
            OpCode::ADCImmediate => ADC(FlexibleAddressingMode::Immediate),
            OpCode::RORAccumulator => ROR(ShiftAddressingMode::Accumulator),
            OpCode::JMPIndirect => JMP(JumpAddressingMode::Indirect),
            OpCode::ADCAbsolute => ADC(FlexibleAddressingMode::Absolute),
            OpCode::RORAbsolute => ROR(ShiftAddressingMode::Absolute),
            OpCode::BVS => BVS,
            OpCode::ADCIndirectIndexed => ADC(FlexibleAddressingMode::IndirectIndexed),
            OpCode::ADCZeroPageX => ADC(FlexibleAddressingMode::ZeroPageX),
            OpCode::RORZeroPageX => ROR(ShiftAddressingMode::ZeroPageX),
            OpCode::SEI => SEI,
            OpCode::ADCAbsoluteY => ADC(FlexibleAddressingMode::AbsoluteY),
            OpCode::ADCAbsoluteX => ADC(FlexibleAddressingMode::AbsoluteX),
            OpCode::RORAbsoluteX => ROR(ShiftAddressingMode::AbsoluteX),
            OpCode::STAIndexedIndirect => STA(StoreAddressingMode::IndexedIndirect),
            OpCode::STYZeroPage => STY(STYAddressingMode::ZeroPage),
            OpCode::STAZeroPage => STA(StoreAddressingMode::ZeroPage),
            OpCode::STXZeroPage => STX(STXAddressingMode::ZeroPage),
            OpCode::DEY => DEY,
            OpCode::TXA => TXA,
            OpCode::STYAbsolute => STY(STYAddressingMode::Absolute),
            OpCode::STAAbsolute => STA(StoreAddressingMode::Absolute),
            OpCode::STXAbsolute => STX(STXAddressingMode::Absolute),
            OpCode::BCC => BCC,
            OpCode::STAIndirectIndexed => STA(StoreAddressingMode::IndirectIndexed),
            OpCode::STYZeroPageX => STY(STYAddressingMode::ZeroPageX),
            OpCode::STAZeroPageX => STA(StoreAddressingMode::ZeroPageX),
            OpCode::STXZeroPageY => STX(STXAddressingMode::ZeroPageY),
            OpCode::TYA => TYA,
            OpCode::STAAbsoluteY => STA(StoreAddressingMode::AbsoluteY),
            OpCode::TXS => TXS,
            OpCode::STAAbsoluteX => STA(StoreAddressingMode::AbsoluteX),
            OpCode::LDYImmediate => LDY(LDYAddressingMode::Immediate),
            OpCode::LDAIndexedIndirect => LDA(FlexibleAddressingMode::IndexedIndirect),
            OpCode::LDXImmediate => LDX(LDXAddressingMode::Immediate),
            OpCode::LDYZeroPage => LDY(LDYAddressingMode::ZeroPage),
            OpCode::LDAZeroPage => LDA(FlexibleAddressingMode::ZeroPage),
            OpCode::LDXZeroPage => LDX(LDXAddressingMode::ZeroPage),
            OpCode::TAY => TAY,
            OpCode::LDAImmediate => LDA(FlexibleAddressingMode::Immediate),
            OpCode::TAX => TAX,
            OpCode::LDYAbsolute => LDY(LDYAddressingMode::Absolute),
            OpCode::LDAAbsolute => LDA(FlexibleAddressingMode::Absolute),
            OpCode::LDXAbsolute => LDX(LDXAddressingMode::Absolute),
            OpCode::BCS => BCS,
            OpCode::LDAIndirectIndexed => LDA(FlexibleAddressingMode::IndirectIndexed),
            OpCode::LDYZeroPageX => LDY(LDYAddressingMode::ZeroPageX),
            OpCode::LDAZeroPageX => LDA(FlexibleAddressingMode::ZeroPageX),
            OpCode::LDXZeroPageY => LDX(LDXAddressingMode::ZeroPageY),
            OpCode::CLV => CLV,
            OpCode::LDAAbsoluteY => LDA(FlexibleAddressingMode::AbsoluteY),
            OpCode::TSX => TSX,
            OpCode::LDYAbsoluteX => LDY(LDYAddressingMode::AbsoluteX),
            OpCode::LDAAbsoluteX => LDA(FlexibleAddressingMode::AbsoluteX),
            OpCode::LDXAbsoluteY => LDX(LDXAddressingMode::AbsoluteY),
            OpCode::CPYImmediate => CPY(CompareAddressingMode::Immediate),
            OpCode::CMPIndexedIndirect => CMP(FlexibleAddressingMode::IndexedIndirect),
            OpCode::CPYZeroPage => CPY(CompareAddressingMode::ZeroPage),
            OpCode::CMPZeroPage => CMP(FlexibleAddressingMode::ZeroPage),
            OpCode::DECZeroPage => DEC(IncDecAddressingMode::ZeroPage),
            OpCode::INY => INY,
            OpCode::CMPImmediate => CMP(FlexibleAddressingMode::Immediate),
            OpCode::DEX => DEX,
            OpCode::CPYAbsolute => CPY(CompareAddressingMode::Absolute),
            OpCode::CMPAbsolute => CMP(FlexibleAddressingMode::Absolute),
            OpCode::DECAbsolute => DEC(IncDecAddressingMode::Absolute),
            OpCode::BNE => BNE,
            OpCode::CMPIndirectIndexed => CMP(FlexibleAddressingMode::IndirectIndexed),
            OpCode::CMPZeroPageX => CMP(FlexibleAddressingMode::ZeroPageX),
            OpCode::DECZeroPageX => DEC(IncDecAddressingMode::ZeroPageX),
            OpCode::CLD => CLD,
            OpCode::CMPAbsoluteY => CMP(FlexibleAddressingMode::AbsoluteY),
            OpCode::CMPAbsoluteX => CMP(FlexibleAddressingMode::AbsoluteX),
            OpCode::DECAbsoluteX => DEC(IncDecAddressingMode::AbsoluteX),
            OpCode::CPXImmediate => CPX(CompareAddressingMode::Immediate),
            OpCode::SBCIndexedIndirect => SBC(FlexibleAddressingMode::IndexedIndirect),
            OpCode::CPXZeroPage => CPX(CompareAddressingMode::ZeroPage),
            OpCode::SBCZeroPage => SBC(FlexibleAddressingMode::ZeroPage),
            OpCode::INCZeroPage => INC(IncDecAddressingMode::ZeroPage),
            OpCode::INX => INX,
            OpCode::SBCImmediate => SBC(FlexibleAddressingMode::Immediate),
            OpCode::NOP => NOP,
            OpCode::CPXAbsolute => CPX(CompareAddressingMode::Absolute),
            OpCode::SBCAbsolute => SBC(FlexibleAddressingMode::Absolute),
            OpCode::INCAbsolute => INC(IncDecAddressingMode::Absolute),
            OpCode::BEQ => BEQ,
            OpCode::SBCIndirectIndexed => SBC(FlexibleAddressingMode::IndirectIndexed),
            OpCode::SBCZeroPageX => SBC(FlexibleAddressingMode::ZeroPageX),
            OpCode::INCZeroPageX => INC(IncDecAddressingMode::ZeroPageX),
            OpCode::SED => SED,
            OpCode::SBCAbsoluteY => SBC(FlexibleAddressingMode::AbsoluteY),
            OpCode::SBCAbsoluteX => SBC(FlexibleAddressingMode::AbsoluteX),
            OpCode::INCAbsoluteX => INC(IncDecAddressingMode::AbsoluteX),
        }
    }
}
